ROSTemplateFormatVersion: '2015-09-01'
Parameters:
  RandomSuffix:
    Type: String
  ResourceArn:
    Type: String
    Default: acs:fc:::services/FnFDemoTimer/functions/timer-handler
  Duration:
    Type: Number
  Input:
    Type: String
  Project:
    Type: String
    Default: ''
  Logstore:
    Type: String
    Default: ''

Conditions:
  ProjectNotEmpty:
    Fn::Not:
      Fn::Equals:
        - ""
        - Ref: Project
  LogStoreNotEmpty:
    Fn::Not:
      Fn::Equals:
        - ""
        - Ref: Logstore
  InitLog:
    Fn::And:
      - ProjectNotEmpty
      - LogStoreNotEmpty

Resources:
  # Create FC role with policy invoke fnf, named TimerFCRole-<random-suffix>
  FCRole:
    Type: ALIYUN::RAM::Role
    Properties:
      RoleName:
        Fn::Replace:
          - <random-suffix>:
              Ref: RandomSuffix
          - TimerFCRole-<random-suffix>
      Description: 'RAM role for fc generated by second-level timer'
      AssumeRolePolicyDocument:
        Version: 1
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - fc.aliyuncs.com
      Policies:
        - PolicyName:
            Fn::Replace:
              - <random-suffix>:
                  Ref: RandomSuffix
              - TimerFCRAMPolicy-<random-suffix>
          PolicyDocument:
            Version: 1
            Statement:
              - Effect: Allow
                Action:
                  - fnf:*
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - log:*
                Resource:
                  - '*'

  # Create FnF role with policy invoke fc, named TimerFnFRole-<random-suffix>
  FnFRole:
    Type: ALIYUN::RAM::Role
    Properties:
      RoleName:
        Fn::Replace:
          - <random-suffix>:
              Ref: RandomSuffix
          - TimerFnFRole-<random-suffix>
      Description: 'RAM role for fnf generated by second-level timer'
      AssumeRolePolicyDocument:
        Version: 1
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - fnf.aliyuncs.com
      Policies:
        - PolicyName:
            Fn::Replace:
              - <random-suffix>:
                  Ref: RandomSuffix
              - TimerFnFRAMPolicy-<random-suffix>
          PolicyDocument:
            Version: 1
            Statement:
              - Effect: Allow
                Action:
                  - fc:InvokeFunction
                Resource:
                  - '*'

  # Create FC service named FnFDemoTimer
  Service:
    DependsOn:
      - FCRole
    Type: ALIYUN::FC::Service
    Properties:
      ServiceName: FnFDemoTimer
      Role:
        Fn::Replace:
          - <account-id>:
              Ref: ALIYUN::AccountId
            <random-suffix>:
              Ref: RandomSuffix
          - acs:ram::<account-id>:role/TimerFCRole-<random-suffix>
      InternetAccess: true
      LogConfig:
        Fn::If:
          - InitLog
          -
            Project:
              Fn::Replace:
                - <project>:
                    Ref: Project
                - <project>
            Logstore:
              Fn::Replace:
                - <logstore>:
                    Ref: Logstore
                - <logstore>
          - Ref: ALIYUN::NoValue

  # Create function timer
  FunctionTimer:
    Type: ALIYUN::FC::Function
    DependsOn:
      - Service
      - Flow
    Properties:
      ServiceName: FnFDemoTimer
      Code:
        SourceCode:
          |-
          # -*-coding: utf-8 -*-
          """
          This function will be invoked by FC time trigger. it will execute FnF flow according the trigger payload settings
          time trigger payload example:
          {"flow_name": "YourFlowName", "input": "{\"duration\": 1}"}
          """
          import json
          import logging

          from aliyunsdkcore.client import AcsClient
          from aliyunsdkcore.auth.credentials import StsTokenCredential
          from aliyunsdkfnf.request.v20190315.StartExecutionRequest import StartExecutionRequest

          logger = logging.getLogger()


          def initialize(context):
              logger.info('Begin initialization ...')

              global fnf_client
              creds = context.credentials
              sts_creds = StsTokenCredential(creds.access_key_id, creds.access_key_secret, creds.security_token)
              fnf_client = AcsClient(credential=sts_creds, region_id=context.region)

              logger.info('End initialization')


          def handler(event, context):
              evt = json.loads(event)
              logger.info('Start execution {} '.format(evt))

              payload = evt.get('payload', '{}')
              data = json.loads(payload)
              input = data.get('input', '')
              evt.update(payload=input)
              evt['duration'] = data.get('duration', 1)

              start_execution(data.get('flow_name', ''), data.get('execution_name', ''), json.dumps(evt), context)


          def start_execution(flow_name, execution_name, input, context):
              request = StartExecutionRequest()
              request.set_FlowName(flow_name)
              request.set_ExecutionName(execution_name)
              request.set_Input(input)
              request.set_endpoint('{}-internal.fnf.aliyuncs.com'.format(context.region))
              fnf_client.do_action_with_exception(request)

      FunctionName: timer
      Handler: index.handler
      Initializer: index.initialize
      Runtime: python3
      MemorySize: 128
      Timeout: 60
      InitializationTimeout: 60

  # Create function timer-gen
  FunctionTimerGen:
    Type: ALIYUN::FC::Function
    DependsOn:
      - Service
      - Flow
    Properties:
      ServiceName: FnFDemoTimer
      Code:
        SourceCode:
          |-
          # -*- coding: utf-8 -*-
          """
          The function used to generate wait intervals, no need to modify
          """

          import logging
          import json
          from datetime import datetime

          RFC = '%Y-%m-%dT%H:%M:%SZ'


          def handler(event, context):
              logger = logging.getLogger()
              logger.info('Input: {}'.format(event))

              evt = json.loads(event)
              trigger_time = evt['triggerTime']
              duration = int(evt.get('duration', '1'))
              trigger_timestamp = datetime.strptime(trigger_time, RFC).timestamp()

              intervals = []
              wait = 0
              while wait < 60:
                  intervals.append(datetime.fromtimestamp(trigger_timestamp + wait).strftime(RFC))
                  wait += duration

              data = {
                  'waits': intervals,
              }
              return json.dumps(data)


      FunctionName: timer-gen
      Handler: index.handler
      Runtime: python3
      MemorySize: 128
      Timeout: 60

  # Create function timer-handler
  FunctionTimerHandler:
    Type: ALIYUN::FC::Function
    DependsOn:
      - Service
      - Flow
    Properties:
      ServiceName: FnFDemoTimer
      Code:
        SourceCode:
          |-
          # -*- coding: utf-8 -*-
          """
          The function need to invoked by timer
          Substitute this with you own function, and you can use any other language runtime to implements this

          Attention:
            Function must return validate json as FunctionFlow task step needed
          """

          import logging
          import json


          def handler(event, context):
              logger = logging.getLogger()
              logger.info('Input: {}'.format(event))

              evt = json.loads(event)

              # this is second level time trigger event all info you can get
              # just like fc time trigger
              trigger_time = evt['triggerTime']
              trigger_name = evt['triggerName']
              payload = evt.get('payload', '{}')

              # todo do something here

              return event

      FunctionName: timer-handler
      Handler: index.handler
      Runtime: python3
      MemorySize: 128
      Timeout: 60

  # Create time trigger for function timer
  TriggerFunction:
    Type: ALIYUN::FC::Trigger
    DependsOn: FunctionTimer
    Properties:
      ServiceName: FnFDemoTimer
      FunctionName: timer
      TriggerName: trigger
      TriggerType: timer
      TriggerConfig:
        Payload:
          Fn::Replace:
            - <random-suffix>:
                Ref: RandomSuffix
              <input>:
                Ref: Input
              <duration>:
                Ref: Duration
            - '{
                "flow_name": "FnFSecondLevelTimer-<random-suffix>",
                "duration": <duration>,
                "input": "<input>"
              }'
        CronExpression: "@every 1m"
        Enable: true

  Flow:
    DependsOn:
      - FnFRole
    Type: ALIYUN::FNF::Flow
    Properties:
      Description: "FnF second-level timer demo"
      Name:
        Fn::Replace:
          - <random-suffix>:
              Ref: RandomSuffix
          - FnFSecondLevelTimer-<random-suffix>
      RoleArn:
        Fn::Replace:
          - <account-id>:
              Ref: ALIYUN::AccountId
            <random-suffix>:
              Ref: RandomSuffix
          - acs:ram::<account-id>:role/TimerFnFRole-<random-suffix>
      Definition:
        Fn::Replace:
          - <random-suffix>:
              Ref: RandomSuffix
            <resource-arn>:
              Ref: ResourceArn
          - |-
            version: v1beta1
            type: flow
            steps:
              - type: task
                name: timer-gen
                resourceArn: acs:fc:::services/FnFDemoTimer/functions/timer-gen

              - type: foreach
                name: test
                iterationMapping:
                  collection: $.waits
                  item: timestamp
                steps:
                  - type: wait
                    name: wait
                    timestamp: $.timestamp

                  - type: task
                    name: timer-handler
                    resourceArn: <resource-arn>
                    inputMappings:
                      - target: triggerTime
                        source: $input.timestamp
                      - target: payload
                        source: $input.payload
                      - target: triggerName
                        source: $input.triggerName
